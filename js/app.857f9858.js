(function(){var n={5186:function(n,e,t){"use strict";var o=t(144),s=t(1096),i=t(3246),a=function(){var n=this,e=n._self._c;return e(s.Z,[e(i.Z,[e("router-view")],1)],1)},r=[],l={created(){document.title="Devlog"}},p=l,d=t(1001),c=(0,d.Z)(p,a,r,!1,null,null,null),u=c.exports,m=t(8345),g=function(){var n=this,e=n._self._c;return e("div",{staticClass:"home-page"},[e("devlog-header"),n._l(Object.keys(n.postsData),(function(t){return e("div",{key:t},[e("post-preview",{staticStyle:{"margin-left":"auto","margin-right":"auto"},attrs:{post:n.postsData[t],file:t}}),e("div",{staticStyle:{height:"50px"}})],1)}))],2)},h=[],f=JSON.parse('{"HowToMakeVueMarkdownBlog.md":{"title":"How to make Markdown blog using Vue and Github pages","tags":["Vue","Markdown","Github pages","blogging","syntax highlighting","Python","frontend"],"image":"https://texterra.ru/upload/iblock/933/header.jpg","timestamp":"21:13 Sunday, 20 Feb"}}'),w=t(8846),k=t(5223),v=t(4944),y=t(9450),b=t(2469),x=function(){var n=this,e=n._self._c;return e("div",{staticClass:"post-preview"},[e(w.Z,{staticStyle:{"border-top-right-radius":"20px","border-top-left-radius":"20px"},attrs:{color:"#ffffff00",elevation:"0",dark:""}},[e("div",{staticClass:"post-img"},[e(b.Z,{attrs:{src:n.post.image,"aspect-ratio":16/9,"max-height":"250"},on:{click:n.openPost}})],1),e(k.EB,{staticClass:"post-preview-title",on:{click:n.openPost}},[n._v(n._s(n.post.title))]),e(k.Qq,{staticStyle:{color:"#565f89"}},[n._v(n._s(n.post.timestamp))]),e(y.Z,{staticStyle:{"padding-left":"16px","padding-right":"16px"},attrs:{column:""}},n._l(n.post.tags,(function(t){return e(v.Z,{key:t,attrs:{color:"#bb9af7",outlined:""}},[n._v(n._s(t))])})),1)],1)],1)},S=[],j=(t(7658),{name:"PostPreview",props:["post","file"],methods:{openPost(){this.$router.push({name:"Post",params:{postName:this.file}})}}}),P=j,_=(0,d.Z)(P,x,S,!1,null,null,null),B=_.exports,T=function(){var n=this,e=n._self._c;return e("div",{staticClass:"devlog-header"},[e("h1",{attrs:{id:"github-link"},on:{click:n.openGithub}},[n._v("Gregory Kogan's")]),e("h2",[n._v("⌨️ Devlog")])])},N=[],M={name:"DevlogHeader",methods:{openGithub(){window.open("https://github.com/GregoryKogan","_blank").focus()}}},D=M,C=(0,d.Z)(D,T,N,!1,null,null,null),L=C.exports,O={name:"HomeView",components:{PostPreview:B,DevlogHeader:L},data:()=>({postsData:f})},E=O,H=(0,d.Z)(E,g,h,!1,null,null,null),I=H.exports,A=function(){var n=this,e=n._self._c;return e("div",{staticClass:"post-page"},[e("div",{staticStyle:{height:"5px"}}),e("h1",[n._v(n._s(n.title))]),e("span",{staticStyle:{"font-size":"18px"}},[n._v(n._s(n.timestamp))]),e(y.Z,{attrs:{column:""}},n._l(n.tags,(function(t){return e(v.Z,{key:t,attrs:{color:"#bb9af7",outlined:""}},[n._v(n._s(t))])})),1),e("div",{staticStyle:{height:"10px"}}),e("div",{domProps:{innerHTML:n._s(n.markdownToHtml)}}),e("div",{staticStyle:{height:"30px"}}),e("BackButton"),e("div",{staticStyle:{height:"30px"}})],1)},z=[],Z=t(1828),R=t(5057),J=function(){var n=this,e=n._self._c;return e(Z.Z,{attrs:{elevation:"10",large:"",color:"#bb9af7",rounded:"",outlined:""},on:{click:n.goBack}},[e(R.Z,{attrs:{left:""}},[n._v(" mdi-arrow-left ")]),n._v(" Back ")],1)},V=[],W={name:"BackButton",methods:{goBack(){this.$router.push("/")}}},$=W,q=(0,d.Z)($,J,V,!1,null,null,null),U=q.exports,F=t(7441),G=t(8445),Y=t.n(G),K=t(5660),X=t.n(K);t(8929),t(9208),t(235),t(2247),t(8080),t(6551),t(4132),t(7013),t(5534),t(4280),t(3530),t(677),t(587),t(7122),t(8674),t(4002),t(47),t(2720),t(6456),t(3229),t(4269),t(1122),t(7706);F.TU.setOptions({langPrefix:"language-",pedantic:!1,gfm:!0,breaks:!1,sanitize:!1,smartLists:!0,smartypants:!1,xhtml:!1});var Q={name:"PostView",components:{BackButton:U},data:()=>({markdownSource:void 0,title:void 0,timestamp:void 0,tags:[]}),computed:{markdownToHtml(){return F.TU.parse(this.markdownSource)}},methods:{isXOverflown(n){return n.scrollWidth>n.clientWidth},codeOverflow(){let n=document.getElementsByTagName("pre");for(let e=0;e<n.length;++e){let t=n[e].getElementsByTagName("code")[0];n[e].classList.remove("overflown-code"),n[e].classList.add("little-code"),this.isXOverflown(t)?(n[e].classList.remove("little-code"),n[e].classList.add("overflown-code")):(n[e].classList.remove("overflown-code"),n[e].classList.add("little-code"))}},resizeHandler(){this.codeOverflow()},replaceCheckboxes(){let n=document.getElementsByTagName("input");while(n.length>0){for(let e=0;e<n.length;++e)"checkbox"==n[e].type&&(n[e].checked?n[e].outerHTML="<span style='color: #00ff00; font-size: 25px'>✔</span>":n[e].outerHTML="<span style='color: #ff0000; font-size: 25px'>✘</span>");n=document.getElementsByTagName("input")}},labelCodeBlocks(){const n="language-";let e=document.getElementsByTagName("pre");for(let t=0;t<e.length;++t)if(e[t].getElementsByTagName("code").length>0){let o;for(let s=0;s<e[t].classList.length;++s)if(e[t].classList[s].startsWith(n)){o=e[t].classList[s].substring(n.length);break}if(o){o=o.charAt(0).toUpperCase()+o.slice(1);let n=document.createElement("span");n.classList.add("codeblock-label"),n.innerHTML=o,e[t].appendChild(n)}}},getPostData(){this.title=f[this.$route.params.postName].title,this.timestamp=f[this.$route.params.postName].timestamp,this.tags=f[this.$route.params.postName].tags},setMarkdownSource(){const n=t(9992)(`./${this.$route.params.postName}`);this.markdownSource=n.default;const e=n=>Y().emojify(n);this.markdownSource=this.markdownSource.replace(/(:.*:)/g,e)}},created(){this.getPostData(),this.setMarkdownSource(),window.addEventListener("resize",this.resizeHandler)},destroyed(){window.removeEventListener("resize",this.resizeHandler)},mounted(){X().highlightAll(),this.codeOverflow(),this.replaceCheckboxes(),this.labelCodeBlocks()}},nn=Q,en=(0,d.Z)(nn,A,z,!1,null,null,null),tn=en.exports;o.ZP.use(m.ZP);const on=[{path:"/",name:"Home",component:I},{path:"/post/:postName",name:"Post",component:tn}],sn=new m.ZP({mode:"history",base:"/devlog/",routes:on});var an=sn,rn=t(629);o.ZP.use(rn.ZP);var ln=new rn.ZP.Store({state:{},mutations:{},actions:{},modules:{}}),pn=t(3806);o.ZP.use(pn.Z);var dn=new pn.Z({theme:{dark:!0}});o.ZP.config.productionTip=!1,new o.ZP({router:an,store:ln,vuetify:dn,render:n=>n(u)}).$mount("#app")},8266:function(n,e,t){"use strict";t.r(e),e["default"]='![Markdown logo](https://texterra.ru/upload/iblock/933/header.jpg)\n\n## What are we doing here?\n\nIn this article you will learn how to:\n- Make structure for `Vue` markdown blog\n- Render markdown files inside Vue\n- Modify markdown rendering CSS to alter it\'s appearance\n- Use `hightlight.js` or `Prism.js` for syntax highlighting\n- Deploy your blog to github pages\n\n## Initialization\nCreate new Vue project using `vue-cli`\n\n```bash\nvue create my-blog\n```\n\nSelect `Manually select features` option. Make sure project uses `Router` and `Vue2.x`. You should not use `history mode for router`. Other settings are not important in our case.\n\n```bash\ncd my-blog\nnpm run serve\n```\n\nDelete all default project files such as `components/HelloWorld.vue`, `views/AboutView.vue` and so on.\n\nNow we are ready to write our own code!\n\n## Project structure\nCreate `postsData.json` file inside `src` folder. Put empty curly brackets in it\n\n```Json\n{}\n```\n\nCreate `posts` folder inside `src`. And create \'MyFirstPost.md` file inside it.\n\n```Markdown\n\x3c!-- MyFirstPost.md --\x3e\n\n# This is my first post\n\n## Some basic Markdown syntax:\n\n#### Normal text\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Adipiscing elit ut aliquam purus sit amet luctus. Amet luctus venenatis lectus magna fringilla urna porttitor rhoncus. Mauris pharetra et ultrices neque ornare aenean. Sed lectus vestibulum mattis ullamcorper velit sed ullamcorper morbi. Interdum consectetur libero id faucibus nisl tincidunt. Sed blandit libero volutpat sed cras ornare arcu dui. Id consectetur purus ut faucibus pulvinar elementum. Egestas integer eget aliquet nibh.\n\n### Code block\n\n\x3c!-- You should remove "\\" before "```"  --\x3e\n\\```JavaScript\nfor (let i = 0; i < 100; i++) {\n    console.log("I love Markdown!");\n}\n\\```\n\n\n### Quotes\n\nSome normal text\n> Very smart quote\n> > Indented quoute\n\n\n### Lists\n- First\n- Second\n- Third\n\n1. First\n2. Second\n3. Third\n\n### Image\n\n![Markdown logo](https://texterra.ru/upload/iblock/933/header.jpg)\n\n\n### Check lists\n\n- [ ] Todo 1\n- [x] Todo 2\n- [ ] Todo 3\n- [x] Todo 4\n```\nNow we need to write python script for managing our posts. Create `AddPost.py` file inside `src` folder.\n\n```Python\nfrom os import listdir, getcwd\nfrom os.path import isfile, join\nfrom json import dump, load\nfrom datetime import datetime\n\n\n# Reading all posts from src/posts/\nPOSTS_DIR = f"{getcwd()}/src/posts/"\n\nposts = [f for f in listdir(POSTS_DIR) if isfile(join(POSTS_DIR, f))]\n\n# Getting all new posts\nnew_posts = []\nwith open(f\'{getcwd()}/src/postsData.json\') as posts_data_file:\n    posts_data = load(posts_data_file)\nold_posts = []\nfor post_file in posts_data:\n    old_posts.append(post_file)\nfor post in posts:\n    if post not in old_posts:\n        new_posts.append(post)\n\nprint(f"{len(new_posts)} new posts found!")\n\n# Adding new posts to postsData.json\nfor post in new_posts:\n    # Asking user for post\'s title, tags and image\n    print(f"New post: {post}")\n    title = input("Title: ")\n    tags = list(input("Tags: ").split(\', \'))  # Tags are separated by ", "\n    image = input("Image: ")\n    post_data = {\n        "title": title,\n        "tags": tags,\n        "image": image,\n        "timestamp": datetime.now().strftime("%H:%M %A, %-d %b")\n    }\n    posts_data[post] = post_data\n    print("Post added!")\n\n# Writing data to postsData.json\nwith open(f\'{getcwd()}/src/postsData.json\', \'w\') as posts_data_file:\n    dump(posts_data, posts_data_file, ensure_ascii=False, indent=2)\n```\n\nLet\'s run it!\n\n```Bash\npython3 src/AddPost.py\n```\n\nResult should look like this:\n![AddPost.py script output](https://i.ibb.co/ZWSrCHB/Arco-Linux-2022-02-20-22-41-37.png)\n\nNow `postsData.json` is populated with new data:\n\n```Json\n{\n  "MyFirstPost.md": {\n    "title": "My first post",\n    "tags": [\n      "some",\n      "tags",\n      "hello",\n      "mom"\n    ],\n    "image": "https://www.denofgeek.com/wp-content/uploads/2019/11/Attack-on-Titan-Season-4-Release-Date-Trailer-News.jpg",\n    "timestamp": "22:39 Sunday, 20 Feb"\n  }\n}\n```\n\nIt\'s time to create a home page. In `views/Home.vue` we will import our generated `postsData.json` file and use it to show clickable previews of all our posts.\n\n```Markup\n// views/Home.vue\n\n<template>\n  <div class="home-page">\n    <div v-for="key in Object.keys(postsData)" :key="key">\n      <post-preview\n        :post="postsData[key]"\n        :file="key"\n        style="margin-left: auto; margin-right: auto"\n      />\n      <div style="height: 50px"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport postsDataJson from "@/postsData.json";\nimport PostPreview from "@/components/PostPreview.vue";\nexport default {\n  name: "Home",\n  components: { PostPreview },\n  data: () => ({\n    postsData: postsDataJson,\n  }),\n};\n<\/script>\n\n<style>\n.home-page {\n  width: 90%;\n  margin-left: auto;\n  margin-right: auto;\n}\n</style>\n```\n\nIt won\'t work for now, because we\'re using `PostPreview` component which is not existing at the moment. Let\'s create it! Add `PostPreview.vue` file to `src/components/` folder.\n\n```Markup\n// components/PostPreview.vue\n\n<template>\n  <div class="post-preview" @click="openPost">\n    <span>{{ post.title }}</span>\n    <div style="height: 10px"></div>\n    <span>{{ post.timestamp }}</span>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: "PostPreview",\n  props: ["post", "file"],\n  methods: {\n    openPost() {\n      this.$router.push({ name: "Post", params: { postName: this.file } });\n    },\n  },\n};\n<\/script>\n\n<style>\n.post-preview {\n  color: #fff;\n  background: #181818;\n  padding: 10px;\n  border-radius: 20px;\n}\n</style>\n```\n\nNow home page should look something like this:\n\n![Home page](https://imgur.com/man0d8B.png)\n\nBut if we click on it, nothing really happens. To fix this we need to create `views/Post.vue` file and configure our `Router` properly.\n\n```JavaScript\n// src/router/index.js\n\nimport Vue from "vue";\nimport VueRouter from "vue-router";\nimport Home from "../views/Home.vue";\nimport Post from "../views/Post.vue";\n\nVue.use(VueRouter);\n\nconst routes = [\n  {\n    path: "/",\n    name: "Home",\n    component: Home,\n  },\n  {\n    path: "/post/:postName",\n    name: "Post",\n    component: Post,\n  },\n];\n\nconst router = new VueRouter({\n  mode: "hash",\n  base: process.env.BASE_URL,\n  routes,\n});\n\nexport default router;\n```\n\nPost view\n\n```Markup\n// views/Post.vue\n\n<template>\n  <div class="post-page">\n    <div style="height: 5px"></div>\n    <h1>{{ title }}</h1>\n    <span style="font-size: 18px">{{ timestamp }}</span>\n    <div style="height: 10px"></div>\n    <div v-html="markdownToHtml"></div>\n    <div style="height: 30px"></div>\n  </div>\n</template>\n\n<script>\nimport postsDataJson from "@/postsData.json";\nimport { marked } from "marked";\n\nexport default {\n  name: "PostView",\n  data: () => ({\n    markdownSource: undefined,\n    title: undefined,\n    timestamp: undefined,\n  }),\n  computed: {\n    markdownToHtml() {\n      return marked.parse(this.markdownSource);\n    },\n  },\n  methods: {\n    getPostData() {\n      this.title = postsDataJson[this.$route.params.postName].title;\n      this.timestamp = postsDataJson[this.$route.params.postName].timestamp;\n      this.tags = postsDataJson[this.$route.params.postName].tags;\n    },\n    setMarkdownSource() {\n      const markdownSource = require(`@/posts/${this.$route.params.postName}`);\n      this.markdownSource = markdownSource.default;\n    },\n  },\n  created() {\n    this.getPostData();\n    this.setMarkdownSource();\n  },\n};\n<\/script>\n\n<style>\n.post-page {\n  width: 90%;\n  margin-left: auto;\n  margin-right: auto;\n}\n</style>\n```\n\nFor markdown rendering we\'ll use `Marked.js` library.\n\n```Bash\nnpm install --save marked\n```\n\nTo load `.md` files we need to specify correct loader for them. \n<br />\nInstall `raw-loader`\n\n```Bash\nnpm install -D raw-loader\n```\n\nAdd this to `vue.config.js`:\n\n```JavaScript\nmodule.exports = {\n  ...\n  configureWebpack: {\n    module: {\n      rules: [\n        {\n          test: /\\.md$/,\n          loader: "raw-loader",\n        },\n      ],\n    },\n  },\n};\n```\n\nHooray! We got our markdown rendered in browser!\n\n![Post page](https://imgur.com/ybKt5tL.png)\n\nThat\'s it! Now you can build your blog on top of this structure.\n\n**Bonus - rendering emojis**\n\nIf you want to render emojis written like this - \\:sunglasses\\:, use node-emoji library.\n\n```Bash\nnpm install --save node-emoji\n```\n\n```JavaScript\n<script>\nimport emoji from "node-emoji";\n\nexport default {\n  methods: {\n    setMarkdownSource() {\n      const markdownSource = require(`@/posts/${this.$route.params.postName}`);\n      this.markdownSource = markdownSource.default;\n      const replacer = (match) => emoji.emojify(match);\n      this.markdownSource = this.markdownSource.replace(/(:.*:)/g, replacer);\n    },\n  },\n};\n<\/script>\n```\n\n### Styling Markdown with CSS\n\nHere are some examples of styling html-rendered markdown\nwith CSS. Of course you can change and adapt anything here \nto satisfy your project\'s needs.\n\n#### Preparation\nIn `Post.vue`:\n```CSS\n<style>\n/* ... */\n.post-page {\n  width: 90%;\n  margin-left: auto;\n  margin-right: auto;\n}\n@media screen and (min-width: 601px) {\n  .post-page {\n    font-size: 20px;\n  }\n}\n@media screen and (max-width: 600px) {\n  .post-page {\n    font-size: 18px;\n  }\n}\n/* ... */\n</style>\n```\n\nIn `App.vue`:\n```CSS\n<style>\n/* ... */\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n#app {\n  background-color: #1a1b26;\n  color: #c0caf5;\n}\n/* ... */\n</style>\n```\n\nNow markdown should look like this:\n\n![Styled md](https://imgur.com/roIaY98.png)\n\n#### Quotes\n\nIn `Post.vue`:\n```CSS\n.post-page blockquote {\n  width: 90%;\n  font-size: 17px;\n  margin-bottom: 10px;\n  padding-left: 10px;\n  padding-top: 5px;\n  padding-right: 10px;\n  padding-bottom: 1px;\n  background-color: #24283b;\n  border-top-right-radius: 20px;\n  border-bottom-right-radius: 20px;\n  border-left: 5px solid #565f89;\n  box-shadow: 5px 5px 10px #13131b, -5px -5px 10px #212331;\n}\n.post-page blockquote p {\n  margin: 0;\n  padding-bottom: 5px;\n}\n```\n\nNow quotes should look like this:\n\n![Styled quotes](https://imgur.com/BYg5qKh.png)\n\n#### Images\n\nIn `Post.vue`:\n```CSS\n.post-page img {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 95%;\n  max-width: 800px;\n  transition: all 0.1s ease-in-out;\n  border: solid 5px #1a1b26;\n  border-radius: 20px;\n  box-shadow: 5px 5px 10px #13131b, -5px -5px 10px #212331;\n}\n.post-page img:hover {\n  transition: all 0.1s ease-in-out;\n  box-shadow: 30px 30px 60px #13141c, -30px -30px 60px #212230;\n}\n```\n\nNow images should look like this:\n\n![Styled image](https://imgur.com/0kc8UjE.png)\n\n##### Bonus - image hosting\n\nIf you prefer to store images locally, you can, but I don\'t recommend doing so because it will slow down the blog\'s page loading. Storing your images somewhere on the internet is a better idea. I use [Imgur](https://imgur.com/), but there are plenty other services for that.\n\n#### Checklists\n\nDefault look of checkboxes is goddamn disgusting.\n\n![Disgusting checkboxes](https://imgur.com/LrPrGrS.png)\n\nI tried to style those with CSS, but it didn\'t work, so I used JavaScript. As long as these checkboxes are static we can simply replace them with some gorgeous emojis.\n\nIn `Post.vue`:\n```JavaScript\nmethods: {\n  // ... //\n  replaceCheckboxes() {\n    let inputs = document.getElementsByTagName("input");\n    while (inputs.length > 0) {\n      for (let i = 0; i < inputs.length; ++i) {\n        if (inputs[i].type == "checkbox") {\n          if (inputs[i].checked)\n            inputs[i].outerHTML =\n              "<span style=\'color: #00ff00; font-size: 25px\'>✔</span>";\n          else\n            inputs[i].outerHTML =\n              "<span style=\'color: #ff0000; font-size: 25px\'>✘</span>";\n        }\n      }\n      inputs = document.getElementsByTagName("input");\n    }\n  },\n},\nmounted() {\n  // ... //\n  this.replaceCheckboxes();\n},\n```\n\nResult:\n\n![new checklists](https://imgur.com/XTpeHkj.png)\n\n#### Code blocks\n\nIn `Post.vue`:\n\n```CSS\n.post-page pre {\n  position: relative;\n  padding-top: 30;\n  background-color: #24283b;\n  border-radius: 20px;\n  color: #a9b1d6;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  overflow: hidden;\n  border: solid 2px #414868;\n  box-shadow: 5px 5px 10px #13131b, -5px -5px 10px #212331;\n}\n@media screen and (min-width: 601px) {\n  .post-page pre {\n    font-size: 18px;\n  }\n}\n@media screen and (max-width: 600px) {\n  .post-page pre {\n    font-size: 13px;\n  }\n}\n```\n\nThis is how it looks now:\n\n![Weird code block](https://imgur.com/WxN9Uqf.png)\n\nWeird, isn\'t it? Well, it\'s all going to be fixed after we apply syntax highlighting.\n\n**Bonus 1 - large code snippets**\n\nIf you want to apply different styles for small and large code snippets, you can assign CSS classes to them like this:\n\n```JavaScript\nmethods: {\n  isXOverflown(element) {\n    return element.scrollWidth > element.clientWidth;\n  },\n  codeOverflow() {\n    let codeBlocks = document.getElementsByTagName("pre");\n    for (let i = 0; i < codeBlocks.length; ++i) {\n      let el = codeBlocks[i].getElementsByTagName("code")[0];\n      codeBlocks[i].classList.remove("overflown-code");\n      codeBlocks[i].classList.add("little-code");\n      if (this.isXOverflown(el)) {\n        codeBlocks[i].classList.remove("little-code");\n        codeBlocks[i].classList.add("overflown-code");\n      } else {\n        codeBlocks[i].classList.remove("overflown-code");\n        codeBlocks[i].classList.add("little-code");\n      }\n    }\n  },\n  resizeHandler() {\n    this.codeOverflow();\n  },\n},\ncreated() {\n  window.addEventListener("resize", this.resizeHandler);\n},\ndestroyed() {\n  window.removeEventListener("resize", this.resizeHandler);\n},\nmounted() {\n  this.codeOverflow();\n},\n```\n\n**Bonus 2 - code block labeling**\n\nIf you want to label yor code blocks (add that little thingy with language name), you can do it like this:\n\n```JavaScript\nmethods: {\n  labelCodeBlocks() {\n    const langPrefix = "language-";\n    let codeBlocks = document.getElementsByTagName("pre");\n    for (let i = 0; i < codeBlocks.length; ++i) {\n      if (codeBlocks[i].getElementsByTagName("code").length > 0) {\n        let language = undefined;\n        for (let j = 0; j < codeBlocks[i].classList.length; ++j) {\n          if (codeBlocks[i].classList[j].startsWith(langPrefix)) {\n            language = codeBlocks[i].classList[j].substring(\n              langPrefix.length\n            );\n            break;\n          }\n        }\n        if (language) {\n          language = language.charAt(0).toUpperCase() + language.slice(1);\n          let label = document.createElement("span");\n          label.classList.add("codeblock-label");\n          label.innerHTML = language;\n          codeBlocks[i].appendChild(label);\n        }\n      }\n    }\n  },\n},\nmounted() {\n  this.labelCodeBlocks();\n},\n```\n\n### Syntax highlighting\n\nOf course you can follow `Marked.js` [documentation](https://marked.js.org/using_advanced#highlight) and use `highlight.js` like this:\n\n```Bash\nnpm install --save highlight.js\n```\n\n```JavaScript\n// Set options\n// `highlight` example uses https://highlightjs.org\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  highlight: function(code, lang) {\n    const hljs = require(\'highlight.js\');\n    const language = hljs.getLanguage(lang) ? lang : \'plaintext\';\n    return hljs.highlight(code, { language }).value;\n  },\n  langPrefix: \'hljs language-\', // highlight.js css expects a top-level \'hljs\' class.\n});\n```\n\nBut, I hate how `highlight.js` functions, so I prefer `Prism.js` as it\'s more advanced and customizable.\n\n```Bash\nnpm install --save prismjs\n```\n\n```JavaScript\n<style>\nimport Prism from "prismjs";\nimport "prismjs/themes/prism-okaidia.css"; // could be any prismjs theme\n\nmarked.setOptions({\n  langPrefix: "language-",\n  // ... //\n});\n\nexport default {\n  // ... //\n  mounted() {\n    Prism.highlightAll();\n    // ... //\n  },\n};\n</style>\n```\n\nNow our codeblock looks like this:\n\n![Highlighted codeblock](https://imgur.com/nbNDock.png)\n\nBetter than before, but doesn\'t really fit. Let\'s customize it! `Prism.js` tokenized our codeblock and we can style it with CSS.\n\n```CSS\n.post-page code {\n  color: #a9b1d6;\n}\ncode .token.number {\n  color: #ff9e64;\n}\ncode .token.keyword {\n  color: #bb9af7;\n}\ncode .token.operator {\n  color: #7dcfff;\n}\ncode .token.punctuation {\n  color: #7aa2f7;\n}\ncode .token.string-interpolation {\n  color: #9ece6a;\n}\ncode .token.builtin {\n  color: #2ac3de;\n}\ncode .token.string {\n  color: #9ece6a;\n}\ncode .token.class-name {\n  color: #9ece6a;\n}\ncode .token.function {\n  color: #7aa2f7;\n}\ncode .token.char {\n  color: #9ece6a;\n}\ncode .token.symbol {\n  color: #bb9af7;\n}\ncode .token.regex {\n  color: #e0af68;\n}\ncode .token.url {\n  color: #73daca;\n}\ncode .token.constant {\n  color: #ff9e64;\n}\ncode .token.property {\n  color: #7dcfff;\n}\ncode .token.important {\n  color: #f7768e;\n}\ncode .token.comment {\n  color: #565f89;\n}\ncode .token.tag {\n  color: #f7768e;\n}\ncode .token.attr-name {\n  color: #bb9af7;\n}\ncode .token.attr-value {\n  color: #c0caf5;\n}\ncode .token.namespace {\n  color: #7dcfff;\n  opacity: 1;\n}\ncode .token.prolog {\n  color: #565f89;\n}\ncode .token.doctype {\n  color: #565f89;\n}\ncode .token.cdata {\n  color: #565f89;\n}\ncode .token.entity {\n  color: #ff9e64;\n}\ncode .token.atrule {\n  color: #bb9af7;\n}\ncode .token.selector {\n  color: #2ac3de;\n}\ncode .token.variable {\n  color: #c0caf5;\n}\n```\n\nNow it looks perfectly:\n\n![styled code](https://imgur.com/dS7spz4.png)\n\nYou can find list of all `Prism.js` tokens [here](https://prismjs.com/tokens.html).\n\nIf you want highlighting for any specific language, you can import it like this:\n\n```JavaScript\n// Example:\n// import "prismjs/components/prism-<lang-name>.min.js";\nimport "prismjs/components/prism-python.min.js";\nimport "prismjs/components/prism-typescript.min.js";\nimport "prismjs/components/prism-json.min.js";\n// ... //\n```\n\nYou can read list of all supported languages [here](https://prismjs.com/)\n\n#### Result\n\nResult of all of above should look like this:\n![CSS result](https://imgur.com/UpOP6uA.png)  \n\n### Deployment\n\n#### Preparation\n\nFor our website to function properly on github pages, we need to\nspecify `public path` variable in `vue.config.js` file in project\'s\nroot directory. \n\n```JavaScript\nmodule.exports = {\n  publicPath: process.env.NODE_ENV === "production" ? "/my-blog/" : "/",\n  // ... //\n};\n```\n\nReplace \'my-blog\' with your repository\'s name.\n\n#### Deploy script\n\nAssuming you already got and connected a github repository, all you need to do is to create `deploy.sh` script in the root of your project and put this code into of it:\n\n```Bash\n#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd dist\n\n# if you are deploying to a custom domain\n# echo \'www.example.com\' > CNAME\n\ngit init\ngit add -A\ngit commit -m \'deploy\'\n\n# if you are deploying to https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git main\n\n# if you are deploying to https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git main:gh-pages\n\ncd -\n```\n\nDo not forget to uncomment and fill necessary lines.\n\n#### Deploy!\n\nMake sure the script has run permissions. If not, you can give it\nlike this:\n\n```Bash\nsudo chmod +x deploy.sh\n```\n\nAll set! Just run the script:\n\n```Bash\n./deploy.sh\n```\n\nWe\'re done. This will build you project, create `gh-pages` branch\nin your repository and deploy it.\n\nYou can read more about Vue deployment [here](https://cli.vuejs.org/guide/deployment.html).\n\n### Bye-bye\n\nThank you for reading through this tutorial. I hope it helped you\nin some way. All code for the blog you\'ve just read is on [project\'s Github repo](https://github.com/GregoryKogan/Devlog).\n\nBye!\n'},9992:function(n,e,t){var o={"./HowToMakeVueMarkdownBlog.md":8266};function s(n){var e=i(n);return t(e)}function i(n){if(!t.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}s.keys=function(){return Object.keys(o)},s.resolve=i,n.exports=s,s.id=9992}},e={};function t(o){var s=e[o];if(void 0!==s)return s.exports;var i=e[o]={id:o,loaded:!1,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}t.m=n,function(){var n=[];t.O=function(e,o,s,i){if(!o){var a=1/0;for(d=0;d<n.length;d++){o=n[d][0],s=n[d][1],i=n[d][2];for(var r=!0,l=0;l<o.length;l++)(!1&i||a>=i)&&Object.keys(t.O).every((function(n){return t.O[n](o[l])}))?o.splice(l--,1):(r=!1,i<a&&(a=i));if(r){n.splice(d--,1);var p=s();void 0!==p&&(e=p)}}return e}i=i||0;for(var d=n.length;d>0&&n[d-1][2]>i;d--)n[d]=n[d-1];n[d]=[o,s,i]}}(),function(){t.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return t.d(e,{a:e}),e}}(),function(){t.d=function(n,e){for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})}}(),function(){t.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"===typeof window)return window}}()}(),function(){t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)}}(),function(){t.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})}}(),function(){t.nmd=function(n){return n.paths=[],n.children||(n.children=[]),n}}(),function(){var n={143:0};t.O.j=function(e){return 0===n[e]};var e=function(e,o){var s,i,a=o[0],r=o[1],l=o[2],p=0;if(a.some((function(e){return 0!==n[e]}))){for(s in r)t.o(r,s)&&(t.m[s]=r[s]);if(l)var d=l(t)}for(e&&e(o);p<a.length;p++)i=a[p],t.o(n,i)&&n[i]&&n[i][0](),n[i]=0;return t.O(d)},o=self["webpackChunkdevlog"]=self["webpackChunkdevlog"]||[];o.forEach(e.bind(null,0)),o.push=e.bind(null,o.push.bind(o))}();var o=t.O(void 0,[998],(function(){return t(5186)}));o=t.O(o)})();
//# sourceMappingURL=app.857f9858.js.map